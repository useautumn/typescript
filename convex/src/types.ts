/**
 * ðŸ¤– AUTO-GENERATED - DO NOT EDIT
 *
 * Generated by: typegen/generate-convex-types.ts
 * Source: @ts-sdk OpenAPI-generated interfaces
 *
 * To regenerate: pnpm gen:convex-types
 */

import { v, type Infer } from "convex/values";

// Manual type definitions (not in SDK)

export const IdentifierOpts = v.object({
  customerId: v.string(),
  customerData: v.optional(
    v.object({
      name: v.optional(v.string()),
      email: v.optional(v.string()),
    })
  ),
});

export type IdentifierOptsType = Infer<typeof IdentifierOpts>;

export const AttachFeatureOptionsConvex = v.object({
  featureId: v.string(),
  quantity: v.number(),
});

export const EntityDataConvex = v.object({
  name: v.optional(v.string()),
  featureId: v.string(),
  id: v.optional(v.string()),
});

export const ExpandArgs = v.optional(
  v.array(
    v.union(
      v.literal("payment_method"),
      v.literal("invoices"),
      v.literal("rewards"),
      v.literal("trials_used"),
      v.literal("entities"),
      v.literal("referrals")
    )
  )
);


export const CustomerDataConvex = v.object({
  email: v.optional(v.union(v.string(), v.null())),
  fingerprint: v.optional(v.union(v.string(), v.null())),
  metadata: v.optional(v.union(v.record(v.string(), v.any()), v.null())),
  name: v.optional(v.union(v.string(), v.null())),
  stripeId: v.optional(v.union(v.string(), v.null()))
});

export type CustomerDataConvexType = Infer<typeof CustomerDataConvex>;

export const TrackArgs = v.object({
  customerData: v.optional(v.union(CustomerDataConvex, v.null())),
  entityData: v.optional(v.union(EntityDataConvex, v.null())),
  entityId: v.optional(v.union(v.string(), v.null())),
  eventName: v.optional(v.string()),
  featureId: v.optional(v.string()),
  idempotencyKey: v.optional(v.union(v.string(), v.null())),
  properties: v.optional(v.union(v.record(v.string(), v.any()), v.null())),
  setUsage: v.optional(v.union(v.boolean(), v.null())),
  timestamp: v.optional(v.union(v.number(), v.null())),
  value: v.optional(v.union(v.number(), v.null()))
});

export type TrackArgsType = Infer<typeof TrackArgs>;

export const UsageArgs = v.object({
  customerData: v.optional(v.union(v.any(), v.null())),
  entityData: v.optional(v.union(v.any(), v.null())),
  entityId: v.optional(v.union(v.string(), v.null())),
  eventName: v.optional(v.string()),
  featureId: v.optional(v.string()),
  idempotencyKey: v.optional(v.union(v.string(), v.null())),
  properties: v.optional(v.union(v.record(v.string(), v.any()), v.null())),
  setUsage: v.optional(v.union(v.boolean(), v.null())),
  timestamp: v.optional(v.union(v.number(), v.null())),
  value: v.optional(v.union(v.number(), v.null()))
});

export type UsageArgsType = Infer<typeof UsageArgs>;

export const CheckArgs = v.object({
  customerData: v.optional(v.any()),
  entityData: v.optional(v.any()),
  entityId: v.optional(v.string()),
  featureId: v.optional(v.string()),
  productId: v.optional(v.string()),
  requiredBalance: v.optional(v.number()),
  sendEvent: v.optional(v.boolean()),
  withPreview: v.optional(v.boolean())
});

export type CheckArgsType = Infer<typeof CheckArgs>;

export const AttachArgs = v.object({
  checkoutSessionParams: v.optional(v.any()),
  customerData: v.optional(v.any()),
  entityData: v.optional(v.any()),
  entityId: v.optional(v.union(v.string(), v.null())),
  forceCheckout: v.optional(v.boolean()),
  freeTrial: v.optional(v.boolean()),
  invoice: v.optional(v.boolean()),
  options: v.optional(v.union(v.array(v.any()), v.null())),
  productId: v.optional(v.union(v.string(), v.null())),
  productIds: v.optional(v.union(v.array(v.string()), v.null())),
  reward: v.optional(v.union(v.string(), v.any())),
  setupPayment: v.optional(v.boolean()),
  successUrl: v.optional(v.string())
});

export type AttachArgsType = Infer<typeof AttachArgs>;

export const CheckoutArgs = v.object({
  checkoutSessionParams: v.optional(v.any()),
  customerData: v.optional(v.any()),
  entityData: v.optional(v.any()),
  entityId: v.optional(v.union(v.string(), v.null())),
  forceCheckout: v.optional(v.boolean()),
  freeTrial: v.optional(v.boolean()),
  invoice: v.optional(v.boolean()),
  options: v.optional(v.union(v.array(v.any()), v.null())),
  productId: v.optional(v.union(v.string(), v.null())),
  productIds: v.optional(v.union(v.array(v.string()), v.null())),
  reward: v.optional(v.union(v.string(), v.any())),
  setupPayment: v.optional(v.boolean()),
  successUrl: v.optional(v.string())
});

export type CheckoutArgsType = Infer<typeof CheckoutArgs>;

export const CancelArgs = v.object({
  productId: v.string(),
  cancelImmediately: v.optional(v.boolean()),
  entityId: v.optional(v.union(v.string(), v.null())),
  prorate: v.optional(v.union(v.boolean(), v.null()))
});

export type CancelArgsType = Infer<typeof CancelArgs>;

export const QueryArgs = v.object({
  featureId: v.union(v.string(), v.any()),
  range: v.optional(v.union(v.union(v.literal('24h'), v.literal('7d'), v.literal('30d'), v.literal('90d'), v.literal('last_cycle')), v.null()))
});

export type QueryArgsType = Infer<typeof QueryArgs>;

export const SetupPaymentArgs = v.object({
  checkoutSessionParams: v.optional(v.record(v.string(), v.any())),
  successUrl: v.optional(v.string())
});

export type SetupPaymentArgsType = Infer<typeof SetupPaymentArgs>;

export const GetCustomerArgs = v.object({
  expand: v.optional(v.array(v.union(v.literal('invoices'), v.literal('trials_used'), v.literal('rewards'), v.literal('entities'), v.literal('referrals'), v.literal('payment_method'), v.literal('upcoming_invoice'))))
});

export type GetCustomerArgsType = Infer<typeof GetCustomerArgs>;

export const CreateCustomerArgs = v.object({
  id: v.union(v.string(), v.null()),
  expand: v.optional(v.array(v.union(v.literal('invoices'), v.literal('trials_used'), v.literal('rewards'), v.literal('entities'), v.literal('referrals'), v.literal('payment_method'), v.literal('upcoming_invoice')))),
  email: v.optional(v.union(v.string(), v.null())),
  entityData: v.optional(v.any()),
  entityId: v.optional(v.string()),
  fingerprint: v.optional(v.string()),
  metadata: v.optional(v.record(v.string(), v.any())),
  name: v.optional(v.union(v.string(), v.null())),
  stripeId: v.optional(v.string())
});

export type CreateCustomerArgsType = Infer<typeof CreateCustomerArgs>;

export const UpdateCustomerArgs = v.object({
  expand: v.optional(v.string()),
  id: v.optional(v.union(v.string(), v.null())),
  email: v.optional(v.union(v.string(), v.null())),
  fingerprint: v.optional(v.union(v.string(), v.null())),
  metadata: v.optional(v.union(v.record(v.string(), v.any()), v.null())),
  name: v.optional(v.union(v.string(), v.null())),
  stripeId: v.optional(v.union(v.string(), v.null()))
});

export type UpdateCustomerArgsType = Infer<typeof UpdateCustomerArgs>;

export const UpdateBalancesArgs = v.object({
  balances: v.array(v.any())
});

export type UpdateBalancesArgsType = Infer<typeof UpdateBalancesArgs>;

export const BillingPortalArgs = v.object({
  returnUrl: v.optional(v.string())
});

export type BillingPortalArgsType = Infer<typeof BillingPortalArgs>;

export const CreateEntityArgs = v.object({
  id: v.string(),
  featureId: v.string(),
  name: v.optional(v.union(v.string(), v.null()))
});

export type CreateEntityArgsType = Infer<typeof CreateEntityArgs>;

export const GetEntityArgs = v.object({
  expand: v.optional(v.array(v.any()))
});

export type GetEntityArgsType = Infer<typeof GetEntityArgs>;

export const CreateReferralCodeArgs = v.object({
  programId: v.string()
});

export type CreateReferralCodeArgsType = Infer<typeof CreateReferralCodeArgs>;

export const RedeemReferralCodeArgs = v.object({
  code: v.string()
});

export type RedeemReferralCodeArgsType = Infer<typeof RedeemReferralCodeArgs>;

export const ListProductsArgs = v.object({

});

export type ListProductsArgsType = Infer<typeof ListProductsArgs>;